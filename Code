import cv2
import mediapipe as mp
import pyautogui

hands = mp.solutions.hands.Hands()
draw = mp.solutions.drawing_utils
display_w, display_h = pyautogui.size()

cam = cv2.VideoCapture(0)
prev_x, prev_y = None, None

while cam.isOpened():
    ret, frame = cam.read()
    frame = cv2.flip(frame, 1)
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb)

    if result.multi_hand_landmarks:
        for lm in result.multi_hand_landmarks:
            side = result.multi_handedness[result.multi_hand_landmarks.index(lm)].classification[0].label
            draw.draw_landmarks(frame, lm, mp.solutions.hands.HAND_CONNECTIONS)

            index_tip = lm.landmark[mp.solutions.hands.HandLandmark.INDEX_FINGER_TIP]
            index_pip = lm.landmark[mp.solutions.hands.HandLandmark.INDEX_FINGER_PIP]

            if side == "Left":
                mcp_x = lm.landmark[mp.solutions.hands.HandLandmark.MIDDLE_FINGER_MCP].x
                mcp_y = lm.landmark[mp.solutions.hands.HandLandmark.MIDDLE_FINGER_MCP].y
                cursor_x, cursor_y = int(mcp_x * display_w), int(mcp_y * display_h)
                pyautogui.moveTo(cursor_x, cursor_y, duration=0.1)

                if index_tip.y >= index_pip.y:
                    pyautogui.click()

            elif side == "Right":
                x, y = int(index_tip.x * display_w), int(index_tip.y * display_h)
                if prev_x is not None and prev_y is not None:
                    dx, dy = x - prev_x, y - prev_y

                    if abs(dx) > abs(dy):
                        if dx > 50:
                            pyautogui.press('right')
                        elif dx < -50:
                            pyautogui.press('left')
                    else:
                        if dy > 50:
                            pyautogui.press('down')
                        elif dy < -50:
                            pyautogui.press('up')
                prev_x, prev_y = x, y

    cv2.imshow("Gesture Control", frame)
    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

cam.release()
cv2.destroyAllWindows()
